name: test pull requests

on:
  pull_request_target:
    types: [opened, synchronize]
jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7.16', '3.7', '3.10']
        os: [windows-latest, macos-latest, ubuntu-latest]
        exclude:
          - os: windows-latest
            python-version: '3.7.16'
          - os: ubuntu-latest
            python-version: '3.7.16'
          - os: macos-latest
            python-version: '3.7'
    steps:
      - name: Get User Permission
        id: checkAccess
        uses: actions-cool/check-user-permission@v2
        with:
          require: write
          username: ${{ github.triggering_actor }}
        env:
          MALSHARE_API: ${{ secrets.MALSHARE_API }}
      - name: Check User Permission
        if: steps.checkAccess.outputs.require-result == 'false'
        run: |
          echo "${{ github.triggering_actor }} does not have permissions on this repo."
          echo "Current permission level is ${{ steps.checkAccess.outputs.user-permission }}"
          echo "Job originally triggered by ${{ github.actor }}"
          exit 1
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{  github.event.pull_request.head.sha }} # This is dangerous without the first access check
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install Linux-specific Dependencies
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          sudo apt-get install xclip xvfb
      - name: Install MacOS-specific Dependencies
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          brew install libmagic
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install flake8
          pip install .[all]
      - name: Run Unit Tests
        if: ${{ matrix.os != 'ubuntu-latest' }}
        run: |
          python -m unittest discover -p test_*.py
      - name: Run Unit Tests
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          XDG_SESSION_TYPE=x11 xvfb-run python -m unittest discover -p test_*.py
